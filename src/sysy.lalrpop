use lalrpop_util::ErrorRecovery;

use crate::ast::*;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
  // skip blanks and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // default case
  _
}
pub CompUnit: CompUnit = <items: GlobalItem+> => CompUnit { <> };

GlobalItem: GlobalItem = {
  Decl => GlobalItem::Decl(<>),
  FuncDef => GlobalItem::Func(<>),
};

FuncDef: FuncDef = {
  <ret_ty: DataType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { ret_ty, ident, params: vec![], block }
  },
  <ret_ty: DataType> <ident: Ident> "(" <params: FuncParams> ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncParams: Vec<FuncParam> = {
  <p: FuncFParam> <mut params: ("," <FuncFParam>)*> => {
    params.insert(0, p);
    params
  }
};

DataType: DataType = {
  "int" => DataType::Int,
  "void" => DataType::Void,
};

FuncFParam: FuncParam = "int" <ident: Ident> => FuncParam { ty: DataType::Int, ident };

Block: Block = "{" <BlockItem*> "}" => Block::new_with_vec(<>);

BlockItem: BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
};

// Declaration
Decl: Decl = {
  ConstDecl => Decl::ConstDecl(<>),
  VarDecl => Decl::VarDecl(<>),
}

VarDecl: Vec<VarDecl> = {
  <ty: DataType> <def: VarDef> <mut defs: ("," <VarDef>)*> ";" => {
    if !matches!(ty, DataType::Int) {
      panic!("incomplete type is not allowed");
    }
    defs.insert(0, def);
    defs
  }
};

VarDef: VarDecl = {
  Ident => VarDecl::new(<>, None),
  <name: Ident> "=" <exp: Exp> => VarDecl::new(name, Some(exp)),
};

ConstDecl: Vec<ConstDecl> = {
  "const" <ty: DataType> <def: ConstDef> <mut defs: ("," <ConstDef>)*> ";" => {
    if !matches!(ty, DataType::Int) {
      panic!("incomplete type is not allowed");
    }
    defs.insert(0, def);
    defs
  }
};

ConstDef: ConstDecl = <name: Ident> "=" <init: Exp> => {
  ConstDecl { name, init }
};

// Statement
Stmt: Stmt = {
  OpenStatement => <>,
  ClosedStatement => <>,
};

NonIfStatement: Stmt = {
  <name: LVal> "=" <val: Exp> ";" => Stmt::Assign(Assign { name, val }),
  Block => Stmt::Block(Box::new(<>)),
  <Exp?> ";" => Stmt::Exp(<>),
  "return" <Exp?> ";" => Stmt::Return(Return { ret_val: <> }),
  "continue" ";" => Stmt::Continue(Continue),
  "break" ";" => Stmt::Break(Break),
};

OpenStatement: Stmt = {
  "if" "(" <cond: Exp> ")" <stmt: Stmt> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(stmt),
    el_stmt: None,
  }),

  "if" "(" <cond: Exp> ")" <if_stmt: ClosedStatement> 
  "else" <el_stmt: OpenStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),

  "while" "(" <cond: Exp> ")" <stmt: OpenStatement> => Stmt::While(While {
    cond,
    stmt: Box::new(stmt),
  }),
};

ClosedStatement: Stmt = {
  NonIfStatement => <>,

  "if" "(" <cond: Exp> ")" <if_stmt: ClosedStatement> 
  "else" <el_stmt: ClosedStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),

  "while" "(" <cond: Exp> ")" <stmt: ClosedStatement> => Stmt::While(While {
    cond,
    stmt: Box::new(stmt),
  }),
};

// identifier
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

LVal: String = Ident => <>;

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

// Expressions
Exp: Box<Exp> = {
  LOrExp => <>,
};

PrimaryExp: Box<Exp> = {
  "(" <Exp> ")" => <>,
  IntConst => Box::new(Exp::Integer(<>)),
  LVal => Box::new(Exp::LVal(<>)),
  ! => { errors.push(<>); Box::new(Exp::Error) },
};

UnaryExp: Box<Exp> = {
  PrimaryExp => <>,
  Call => Box::new(Exp::Uxp(UnaryExp::Call(<>))),
  <op: UnaryOp> <uxp: UnaryExp> => {
    Box::new(Exp::Uxp(UnaryExp::Unary(op, uxp)))
  },
};

Call: Call = {
  <func_id: Ident> "(" ")" => Call { func_id, args: vec![] },
  <func_id: Ident> "(" <arg: Exp>  <mut args: ("," <Exp>)*> ")" => {
    args.insert(0, arg);
    Call {
      func_id,
      args
    }
  }
};

// macro for all the binary expressions
Tier<Op, NextTier>: Box<Exp> = {
  <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => {
    Box::new(Exp::Bxp(BinaryExp { op: op, lhs: l, rhs: r }))
  },
  NextTier
};

MulExp = Tier<MulOp, UnaryExp>;
AddExp = Tier<AddOp, MulExp>;
RelExp = Tier<RelOp, AddExp>;
EqExp = Tier<EqOp, RelExp>;
LAndExp = Tier<LAndOp, EqExp>;
LOrExp = Tier<LOrOp, LAndExp>;

// Operators
MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
};

LAndOp: BinaryOp = {
  "&&" => BinaryOp::And,
};

LOrOp: BinaryOp = {
  "||" => BinaryOp::Or,
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Nop,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

