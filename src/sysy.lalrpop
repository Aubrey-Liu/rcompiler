use lalrpop_util::ErrorRecovery;

use crate::ast::*;

#[LALR]
grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
  // skip blanks and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // default case
  _
}
pub CompUnit: CompUnit = <items: GlobalItem+> => CompUnit { <> };

GlobalItem: GlobalItem = {
  Decl => GlobalItem::Decl(<>),
  FuncDef => GlobalItem::Func(<>),
};

FuncDef: FuncDef = {
  <ret_kind: ExprKind> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { ret_kind, ident, params: vec![], block }
  },
  <ret_kind: ExprKind> <ident: Ident> "(" <params: FuncParams> ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncParams: Vec<FuncParam> = <Comma<FuncParam>> => <>;

FuncParam: FuncParam = {
  "int" <ident: Ident> => FuncParam { kind: ExprKind::Int, ident, dims: Vec::new() },
  "int" <ident: Ident> "[" "]" <dims: Dim*> => FuncParam { kind: ExprKind::Array, ident, dims },
}

Block: Block = "{" <BlockItem*> "}" => Block::new_with_vec(<>);

BlockItem: BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
};

// Declaration
Decl: Decl = {
  ConstDecl => Decl::ConstDecl(<>),
  VarDecl => Decl::VarDecl(<>),
}

VarDecl: Vec<VarDecl> = {
  <kind: ExprKind> <defs: Comma<VarDef>> ";" => {
    if !matches!(kind, ExprKind::Int) {
      panic!("incomplete type is not allowed");
    }
    defs
  }
};

ConstDecl: Vec<ConstDecl> = {
  "const" <kind: ExprKind> <defs: Comma<ConstDef>> ";" => {
    if !matches!(kind, ExprKind::Int) {
      panic!("incomplete type is not allowed");
    }
    defs
  }
};

VarDef: VarDecl = <lval: LVal> <init: ("=" <InitVal>)?> => VarDecl::new(lval, init);

ConstDef: ConstDecl = <lval: LVal> "=" <init: InitVal> => ConstDecl::new(lval, init);

InitVal: InitVal = {
  Expr => InitVal::Expr(<>),
  "{" "}" => InitVal::List(vec![]),
  "{" <Comma<InitVal>> "}" => InitVal::List(<>),
};

// Statement
Stmt: Stmt = {
  OpenStatement => <>,
  ClosedStatement => <>,
};

NonIfStatement: Stmt = {
  <lval: LVal> "=" <val: Expr> ";" => Stmt::Assign(Assign { lval, val }),
  Block => Stmt::Block(<>),
  <Expr?> ";" => Stmt::Expr(<>),
  "return" <Expr?> ";" => Stmt::Return(Return { ret_val: <> }),
  "continue" ";" => Stmt::Continue(Continue),
  "break" ";" => Stmt::Break(Break),
};

OpenStatement: Stmt = {
  "if" <cond: Condition> <stmt: Stmt> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(stmt),
    el_stmt: None,
  }),

  "if" <cond: Condition> <if_stmt: ClosedStatement> 
  "else" <el_stmt: OpenStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),

  "while" <cond: Condition> <stmt: OpenStatement> => Stmt::While(While {
    cond,
    stmt: Box::new(stmt),
  }),
};

ClosedStatement: Stmt = {
  NonIfStatement => <>,

  "if" <cond: Condition> <if_stmt: ClosedStatement> 
  "else" <el_stmt: ClosedStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),

  "while" <cond: Condition> <stmt: ClosedStatement> => Stmt::While(While {
    cond,
    stmt: Box::new(stmt),
  }),
};

LVal: LVal = <ident: Ident> <dims: Dim*> => LVal {<>};

Dim: Expr = "[" <Expr> "]" => <>;

// Expressions
Expr: Expr = {
  LOrExp => <>,
};

PrimaryExp: Expr = {
  "(" <Expr> ")" => <>,
  IntConst => Expr::Integer(<>),
  LVal => Expr::LVal(<>),
  ! => { errors.push(<>); Expr::Error },
};

UnaryExpr: Expr = {
  PrimaryExp => <>,
  Call => Expr::UnaryExpr(UnaryExpr::Call(<>)),
  <op: UnaryOp> <uxp: UnaryExpr> => Expr::UnaryExpr(UnaryExpr::Unary(op, Box::new(uxp))),
};

Call: Call = {
  <func_id: Ident> "(" ")" => Call { func_id, args: vec![] },
  <func_id: Ident> "(" <args: Comma<Expr>> ")" => Call { func_id, args },
};

// macro for all the binary expressions
Tier<Op, NextTier>: Expr = {
  <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => {
    Expr::BinaryExpr(BinaryExpr { op: op, lhs: Box::new(l), rhs: Box::new(r) })
  },
  NextTier
};

MulExp = Tier<MulOp, UnaryExpr>;
AddExp = Tier<AddOp, MulExp>;
RelExp = Tier<RelOp, AddExp>;
EqExp = Tier<EqOp, RelExp>;
LAndExp = Tier<LAndOp, EqExp>;
LOrExp = Tier<LOrOp, LAndExp>;

// Operators
MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
};

LAndOp: BinaryOp = {
  "&&" => BinaryOp::And,
};

LOrOp: BinaryOp = {
  "||" => BinaryOp::Or,
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Nop,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

// identifier
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

#[inline]
Condition: Expr = "(" <Expr> ")" => <>;

#[inline]
Comma<T>: Vec<T> = {
  <mut items: (<T> ",")*> <item: T> => {
    items.push(item);
    items
  }
};

#[inline]
ExprKind: ExprKind = {
  "int" => ExprKind::Int,
  "void" => ExprKind::Void,
};
