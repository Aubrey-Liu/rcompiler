use lalrpop_util::ErrorRecovery;

use crate::ast::*;

grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);

match {
  // skip blanks and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^\n\r]*[\n\r]*)*\*/" => {},
  // default case
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType("int".to_string());

Block: Block = "{" <BlockItem+> "}" => Block::new_with_vec(<>);
InnerBlock: Block = "{" <BlockItem*> "}" => Block::new_with_vec(<>);

BlockItem: BlockItem = {
  ConstDecl => BlockItem::ConstDecl(<>),
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
};

Stmt: Stmt = {
  OpenStatement => <>,
  ClosedStatement => <>,
};

NonIfStatement: Stmt = {
  <name: LVal> "=" <val: Exp> ";" => Stmt::Assign(Assign { name, val }),
  InnerBlock => Stmt::Block(Box::new(<>)),
  <Exp?> ";" => Stmt::Exp(<>),
  "return" <Exp?> ";" => Stmt::Return(<>),
};

OpenStatement: Stmt = {
  "if" "(" <cond: Exp> ")" <if_stmt: Stmt> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: None,
  }),
  "if" "(" <cond: Exp> ")" <if_stmt: ClosedStatement> 
  "else" <el_stmt: OpenStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),
};

ClosedStatement: Stmt = {
  NonIfStatement => <>,
  "if" "(" <cond: Exp> ")" <if_stmt: ClosedStatement> 
  "else" <el_stmt: ClosedStatement> => Stmt::Branch(Branch {
    cond,
    if_stmt: Box::new(if_stmt),
    el_stmt: Some(Box::new(el_stmt)),
  }),
};

Decl: Vec<Decl> = {
  "int" <mut defs: (<VarDef> ",")*> <def: VarDef> ";" => {
    defs.push(def);
    defs
  }
};

VarDef: Decl = {
  Ident => Decl::new_without_init(<>),
  <name: Ident> "=" <exp: Exp> => Decl::new_with_init(name, exp),
};

ConstDecl: Vec<ConstDecl> = {
  "const" "int" <mut defs: (<ConstDef> ",")*> <def: ConstDef>  ";" => {
    defs.push(def);
    defs
  }
};

ConstDef: ConstDecl = <name: Ident> "=" <init: Exp> => {
  ConstDecl { name, init }
};

// identifier
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

LVal: String = Ident => <>;

PrimaryExp: Box<Exp> = {
  "(" <Exp> ")" => <>,
  IntConst => Box::new(Exp::Integer(<>)),
  LVal => Box::new(Exp::LVal(<>, None)),
  ! => { errors.push(<>); Box::new(Exp::Error) },
};

// macro for all the binary expression patterns
Tier<Op, NextTier>: Box<Exp> = {
  <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => {
    Box::new(Exp::Bxp(BinaryExp { op: op, lhs: l, rhs: r }))
  },
  NextTier
};

MulExp = Tier<MulOp, UnaryExp>;
AddExp = Tier<AddOp, MulExp>;
RelExp = Tier<RelOp, AddExp>;
EqExp = Tier<EqOp, RelExp>;
LAndExp = Tier<LAndOp, EqExp>;
LOrExp = Tier<LOrOp, LAndExp>;

// match all the operators
MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp:: Gt,
  ">=" => BinaryOp::Ge,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
};

LAndOp: BinaryOp = {
  "&&" => BinaryOp::And,
};

LOrOp: BinaryOp = {
  "||" => BinaryOp::Or,
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Nop,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

Exp: Box<Exp> = {
  LOrExp => <>,
};

UnaryExp: Box<Exp> = {
  PrimaryExp => <>,
  <op: UnaryOp> <uxp: UnaryExp> => {
    Box::new(Exp::Uxp(UnaryExp { op: op, rhs: uxp }))
  },
};
