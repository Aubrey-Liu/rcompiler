use crate::ast::*;

grammar;

match {
  // skip blanks and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^\n\r]*[\n\r]*)*\*/" => {},
  // default case
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType("int".to_string());

Block: Block = "{" <BlockItem+> "}" => Block::new_with_vec(&<>);

BlockItem: AstValue = {
  Return => <>,
  Decl => <>,
};

Decl: AstValue = {
  ConstDecl => <>,
};

ConstDecl: AstValue = {
  "const" "int" <mut vals: (<ConstDef> ",")*> <val: ConstDef>  ";" => {
    vals.push(val);
    AstValue::ConstDecl(vals)
  }
};

ConstDef: ConstDecl = <name: Ident> "=" <init: ConstInit> => {
  ConstDecl { name: name, init: init }
};

ConstInit: Box<Exp> = ConstExp => <>;
ConstExp: Box<Exp> = Exp => <>;

Return: AstValue = "return" <Exp> ";" => AstValue::Return(<>);

// identifier
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

LVal: String = Ident => <>;

PrimaryExp: Box<Exp> = {
  "(" <Exp> ")" => <>,
  IntConst => Box::new(Exp::Integer(<>)),
  LVal => Box::new(Exp::LVal(<>)),
};

// macro for all the binary expression patterns
Tier<Op, NextTier>: Box<Exp> = {
  <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => {
    Box::new(Exp::Bxp(BinaryExp { op: op, left: l, right: r }))
  },
  NextTier
};

MulExp = Tier<MulOp, UnaryExp>;
AddExp = Tier<AddOp, MulExp>;
RelExp = Tier<RelOp, AddExp>;
EqExp = Tier<EqOp, RelExp>;
LAndExp = Tier<LAndOp, EqExp>;
LOrExp = Tier<LOrOp, LAndExp>;

// match all the operators
MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Lte,
  ">" => BinaryOp:: Gt,
  ">=" => BinaryOp::Gte,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
};

LAndOp: BinaryOp = {
  "&&" => BinaryOp::And,
};

LOrOp: BinaryOp = {
  "||" => BinaryOp::Or,
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Nop,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

Exp: Box<Exp> = {
  LOrExp => <>,
};

UnaryExp: Box<Exp> = {
  PrimaryExp => <>,
  <op: UnaryOp> <uxp: UnaryExp> => {
    Box::new(Exp::Uxp(UnaryExp { op: op, right: uxp }))
  },
};
