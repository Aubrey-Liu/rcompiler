use crate::ast::*;

grammar;

match {
  // skip blanks and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^\n\r]*[\n\r]*)*\*/" => {},
  // default case
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType("int".to_string());

Block: Block = "{" <AstValue+> "}" => Block::new_with_vec(&<>);

AstValue: AstValue = {
  Return => AstValue::Return(<>),
};

Return: Exp = "return" <Exp> ";" => <>;

// identifier
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

MulExp = Tier<MulOp, UnaryExp>;
AddExp = Tier<AddOp, MulExp>;
RelExp = Tier<RelOp, AddExp>;
EqExp = Tier<EqOp, RelExp>;
LAndExp = Tier<LAndOp, EqExp>;
LOrExp = Tier<LOrOp, LAndExp>;

Exp: Exp = {
  LOrExp => <>,
};

UnaryExp: Exp = {
  PrimaryExp => <>,
  <op: UnaryOp> <uxp: UnaryExp> => Exp::Uxp(UnaryExp {
    op: op,
    right: Box::new(uxp),
  })
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Nop,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

PrimaryExp: Exp = {
  "(" <Exp> ")" => <>,
  IntConst => Exp::Integer(<>),
};

Tier<Op, NextTier>: Exp = {
  <l: Tier<Op, NextTier>> <op: Op> <r: NextTier> => 
    Exp::Bxp(BinaryExp {
      op: op,
      left: Box::new(l),
      right: Box::new(r),
    }),
  NextTier
};

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Lte,
  ">" => BinaryOp:: Gt,
  ">=" => BinaryOp::Gte,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
};

LAndOp: BinaryOp = {
  "&&" => BinaryOp::And,
};

LOrOp: BinaryOp = {
  "||" => BinaryOp::Or,
};
